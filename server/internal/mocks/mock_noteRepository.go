// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\julio\OneDrive\Documentos\GitHub\pds\ANote\server\internal\interfaces\repositories\noteRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	domain "anote/internal/domain"
	errors "anote/internal/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// AddCommunities mocks base method.
func (m *MockNoteRepository) AddCommunities(noteId string, communityIds []string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommunities", noteId, communityIds)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddCommunities indicates an expected call of AddCommunities.
func (mr *MockNoteRepositoryMockRecorder) AddCommunities(noteId, communityIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommunities", reflect.TypeOf((*MockNoteRepository)(nil).AddCommunities), noteId, communityIds)
}

// AddTags mocks base method.
func (m *MockNoteRepository) AddTags(noteId string, tagIds []string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", noteId, tagIds)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddTags indicates an expected call of AddTags.
func (mr *MockNoteRepositoryMockRecorder) AddTags(noteId, tagIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockNoteRepository)(nil).AddTags), noteId, tagIds)
}

// Create mocks base method.
func (m *MockNoteRepository) Create(note *domain.Note) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", note)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNoteRepositoryMockRecorder) Create(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteRepository)(nil).Create), note)
}

// Delete mocks base method.
func (m *MockNoteRepository) Delete(id string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNoteRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoteRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockNoteRepository) GetAll() ([]domain.Note, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNoteRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNoteRepository)(nil).GetAll))
}

// GetByAuthorID mocks base method.
func (m *MockNoteRepository) GetByAuthorID(userID string) ([]domain.Note, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthorID", userID)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByAuthorID indicates an expected call of GetByAuthorID.
func (mr *MockNoteRepositoryMockRecorder) GetByAuthorID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthorID", reflect.TypeOf((*MockNoteRepository)(nil).GetByAuthorID), userID)
}

// GetByCommunityID mocks base method.
func (m *MockNoteRepository) GetByCommunityID(communityID string) ([]domain.Note, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCommunityID", communityID)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByCommunityID indicates an expected call of GetByCommunityID.
func (mr *MockNoteRepositoryMockRecorder) GetByCommunityID(communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCommunityID", reflect.TypeOf((*MockNoteRepository)(nil).GetByCommunityID), communityID)
}

// GetByID mocks base method.
func (m *MockNoteRepository) GetByID(id string) (*domain.Note, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNoteRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNoteRepository)(nil).GetByID), id)
}

// RemoveCommunities mocks base method.
func (m *MockNoteRepository) RemoveCommunities(noteId string, communityIds []string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCommunities", noteId, communityIds)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// RemoveCommunities indicates an expected call of RemoveCommunities.
func (mr *MockNoteRepositoryMockRecorder) RemoveCommunities(noteId, communityIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCommunities", reflect.TypeOf((*MockNoteRepository)(nil).RemoveCommunities), noteId, communityIds)
}

// RemoveTags mocks base method.
func (m *MockNoteRepository) RemoveTags(noteId string, tagIds []string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTags", noteId, tagIds)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// RemoveTags indicates an expected call of RemoveTags.
func (mr *MockNoteRepositoryMockRecorder) RemoveTags(noteId, tagIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTags", reflect.TypeOf((*MockNoteRepository)(nil).RemoveTags), noteId, tagIds)
}

// Update mocks base method.
func (m *MockNoteRepository) Update(note *domain.Note) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", note)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteRepositoryMockRecorder) Update(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepository)(nil).Update), note)
}
