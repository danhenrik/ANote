// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\julio\OneDrive\Documentos\GitHub\pds\ANote\server\internal\interfaces\repositories\commentRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	domain "anote/internal/domain"
	errors "anote/internal/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentRepository) Create(comment *domain.Comment) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", comment)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommentRepositoryMockRecorder) Create(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepository)(nil).Create), comment)
}

// Delete mocks base method.
func (m *MockCommentRepository) Delete(idComment string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", idComment)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryMockRecorder) Delete(idComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepository)(nil).Delete), idComment)
}

// GetNoteComments mocks base method.
func (m *MockCommentRepository) GetNoteComments(idNote string) ([]domain.Comment, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteComments", idNote)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetNoteComments indicates an expected call of GetNoteComments.
func (mr *MockCommentRepositoryMockRecorder) GetNoteComments(idNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteComments", reflect.TypeOf((*MockCommentRepository)(nil).GetNoteComments), idNote)
}
