// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\julio\OneDrive\Documentos\GitHub\pds\ANote\server\internal\interfaces\repositories\likeRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	domain "anote/internal/domain"
	errors "anote/internal/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLikeRepository is a mock of LikeRepository interface.
type MockLikeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikeRepositoryMockRecorder
}

// MockLikeRepositoryMockRecorder is the mock recorder for MockLikeRepository.
type MockLikeRepositoryMockRecorder struct {
	mock *MockLikeRepository
}

// NewMockLikeRepository creates a new mock instance.
func NewMockLikeRepository(ctrl *gomock.Controller) *MockLikeRepository {
	mock := &MockLikeRepository{ctrl: ctrl}
	mock.recorder = &MockLikeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeRepository) EXPECT() *MockLikeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLikeRepository) Create(like *domain.Like) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", like)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLikeRepositoryMockRecorder) Create(like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLikeRepository)(nil).Create), like)
}

// Delete mocks base method.
func (m *MockLikeRepository) Delete(idUser, idNote string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", idUser, idNote)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLikeRepositoryMockRecorder) Delete(idUser, idNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLikeRepository)(nil).Delete), idUser, idNote)
}

// GetByIdNote mocks base method.
func (m *MockLikeRepository) GetByIdNote(idNote string) ([]domain.Like, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdNote", idNote)
	ret0, _ := ret[0].([]domain.Like)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByIdNote indicates an expected call of GetByIdNote.
func (mr *MockLikeRepositoryMockRecorder) GetByIdNote(idNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdNote", reflect.TypeOf((*MockLikeRepository)(nil).GetByIdNote), idNote)
}

// GetByIdUserAndIdNote mocks base method.
func (m *MockLikeRepository) GetByIdUserAndIdNote(idUser, idNote string) (*domain.Like, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdUserAndIdNote", idUser, idNote)
	ret0, _ := ret[0].(*domain.Like)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByIdUserAndIdNote indicates an expected call of GetByIdUserAndIdNote.
func (mr *MockLikeRepositoryMockRecorder) GetByIdUserAndIdNote(idUser, idNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdUserAndIdNote", reflect.TypeOf((*MockLikeRepository)(nil).GetByIdUserAndIdNote), idUser, idNote)
}
