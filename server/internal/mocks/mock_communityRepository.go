// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\julio\OneDrive\Documentos\GitHub\pds\ANote\server\internal\interfaces\repositories\communityRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	domain "anote/internal/domain"
	errors "anote/internal/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommunityRepository is a mock of CommunityRepository interface.
type MockCommunityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityRepositoryMockRecorder
}

// MockCommunityRepositoryMockRecorder is the mock recorder for MockCommunityRepository.
type MockCommunityRepositoryMockRecorder struct {
	mock *MockCommunityRepository
}

// NewMockCommunityRepository creates a new mock instance.
func NewMockCommunityRepository(ctrl *gomock.Controller) *MockCommunityRepository {
	mock := &MockCommunityRepository{ctrl: ctrl}
	mock.recorder = &MockCommunityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityRepository) EXPECT() *MockCommunityRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockCommunityRepository) AddMember(communityId, userId string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", communityId, userId)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockCommunityRepositoryMockRecorder) AddMember(communityId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockCommunityRepository)(nil).AddMember), communityId, userId)
}

// CheckMember mocks base method.
func (m *MockCommunityRepository) CheckMember(communityId, userId string) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMember", communityId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// CheckMember indicates an expected call of CheckMember.
func (mr *MockCommunityRepositoryMockRecorder) CheckMember(communityId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMember", reflect.TypeOf((*MockCommunityRepository)(nil).CheckMember), communityId, userId)
}

// Create mocks base method.
func (m *MockCommunityRepository) Create(community *domain.Community) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", community)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommunityRepositoryMockRecorder) Create(community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommunityRepository)(nil).Create), community)
}

// Delete mocks base method.
func (m *MockCommunityRepository) Delete(id string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommunityRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommunityRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockCommunityRepository) GetAll() ([]domain.Community, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Community)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCommunityRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCommunityRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockCommunityRepository) GetById(id string) (*domain.Community, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*domain.Community)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCommunityRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCommunityRepository)(nil).GetById), id)
}

// GetByNoteId mocks base method.
func (m *MockCommunityRepository) GetByNoteId(noteId string) ([]domain.Community, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNoteId", noteId)
	ret0, _ := ret[0].([]domain.Community)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByNoteId indicates an expected call of GetByNoteId.
func (mr *MockCommunityRepositoryMockRecorder) GetByNoteId(noteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNoteId", reflect.TypeOf((*MockCommunityRepository)(nil).GetByNoteId), noteId)
}

// GetByUserId mocks base method.
func (m *MockCommunityRepository) GetByUserId(userId string) ([]domain.Community, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].([]domain.Community)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockCommunityRepositoryMockRecorder) GetByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockCommunityRepository)(nil).GetByUserId), userId)
}

// GetMembers mocks base method.
func (m *MockCommunityRepository) GetMembers(communityId string) ([]domain.User, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", communityId)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockCommunityRepositoryMockRecorder) GetMembers(communityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockCommunityRepository)(nil).GetMembers), communityId)
}

// RemoveMember mocks base method.
func (m *MockCommunityRepository) RemoveMember(communityId, userId string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", communityId, userId)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockCommunityRepositoryMockRecorder) RemoveMember(communityId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockCommunityRepository)(nil).RemoveMember), communityId, userId)
}

// SetBackground mocks base method.
func (m *MockCommunityRepository) SetBackground(communityId, filename string) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackground", communityId, filename)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// SetBackground indicates an expected call of SetBackground.
func (mr *MockCommunityRepositoryMockRecorder) SetBackground(communityId, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackground", reflect.TypeOf((*MockCommunityRepository)(nil).SetBackground), communityId, filename)
}
